// Mocks generated by Mockito 5.4.0 from annotations
// in sme_plateia/test/features/auth/domain/usecases/autenticacao/autenticar_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sme_plateia/core/domain/failures/failure.codegen.dart' as _i5;
import 'package:sme_plateia/features/auth/domain/entities/autenticacao.dart'
    as _i6;
import 'package:sme_plateia/features/auth/domain/repositories/i_authentication_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IAutenticacaoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAutenticacaoRepository extends _i1.Mock
    implements _i3.IAutenticacaoRepository {
  MockIAutenticacaoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i3.AuthenticationStatus> get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i4.Stream<_i3.AuthenticationStatus>.empty(),
      ) as _i4.Stream<_i3.AuthenticationStatus>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Autenticacao>> autenticar(
    String? login,
    String? senha,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #autenticar,
          [
            login,
            senha,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Autenticacao>>.value(
                _FakeEither_0<_i5.Failure, _i6.Autenticacao>(
          this,
          Invocation.method(
            #autenticar,
            [
              login,
              senha,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Autenticacao>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Autenticacao?>>
      getUsuarioAutenticado() => (super.noSuchMethod(
            Invocation.method(
              #getUsuarioAutenticado,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.Autenticacao?>>.value(
                    _FakeEither_0<_i5.Failure, _i6.Autenticacao?>(
              this,
              Invocation.method(
                #getUsuarioAutenticado,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Autenticacao?>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> fazerLogout() =>
      (super.noSuchMethod(
        Invocation.method(
          #fazerLogout,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #fazerLogout,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
